/**
 * Yes/No ダイアログ実装例
 * 押下時にボタン画像動かすなどした方が押した感ある
 */
class YesNoDialog {
	var texture_:Texture;
	var buttonTex_:Texture;
	var dialogTop_:Texture;
	var dialogMiddle_:Texture;
	var dialogBottom_:Texture;

	var width_:int;
	var height_:int;

	var font_:Font;
	var yesArea_:Rect;
	var noArea_:Rect;
	var textArea_:Rect;
	var buttonArea_:Rect;

	var yesButtonArea_:Rect;
	var noButtonArea_:Rect;

	const MarginPixel = 20;

	function YesNoDialog() {
		font_ = new Font();
		font_.face = "Gen Shin Gothic Monospace";
		font_.height = 48;

		dialogTop_ = new Texture( "dialog_top_holo_light.9.png", tcfRGBA, true );
		dialogMiddle_ = new Texture( "dialog_middle_holo_light.9.png", tcfRGBA, true );
		dialogBottom_ = new Texture( "dialog_bottom_holo_light.9.png", tcfRGBA, true );
		buttonTex_ = new Texture( "keyboard_key_feedback_background.9.png", tcfRGBA, true );
	}

	/**
	 * タッチorマウスでボタンを押されたか判定
	 * @param x 描画座標系でのX座標
	 * @param y 描画座標系でのY座標
	 * @param owner イベント処理対象、ボタン押下があるとこのクラスのonDialogYes/onDialogNoメソッドが呼ばれる。
	 */
	function onPointerUp( x, y, owner ):bool {
		//dm( "x : " + x + ", y : " + y );
		//dm( "left : " + yesButtonArea_.left + ", top : " + yesButtonArea_.top + ", right : " + yesButtonArea_.right + ", bottom : " + yesButtonArea_.bottom );
		//dm( "left : " + noButtonArea_.left + ", top : " + noButtonArea_.top + ", right : " + noButtonArea_.right + ", bottom : " + noButtonArea_.bottom );
		if( yesButtonArea_ !== void && yesButtonArea_.includedPos( x, y ) ) {
			owner.onDialogYes();
			return true;
		} else if( noButtonArea_ !== void && noButtonArea_.includedPos( x, y ) ) {
			owner.onDialogNo();
			return true;
		}
		return false;
	}

	/**
	 * ダイアログボックスに必要なテクスチャを生成する。
	 * @description この実装では毎回すべて作り直しているが、一度生成した後は、変更されることの多いtextやtitleのみを書き換えた方が効率的。
	 * 幅を多少余裕見ておけば、テクスチャなど作り直すことは少ないはず。
	 *
	 * ここでは文字をフルカラーで描画しているが、8bppでも文字描画できるようにしたので、テクスチャも8bppにして、シェーダーで
	 * 色を付けるようにしてもよい。そうするとテクスチャメモリが1/4に節約できる。
	 * @param text ダイアログ内容文字列
	 * @param yesText YESボタン文字列
	 * @param noText NOボタン文字列
	 */
	function create( text:string, yesText:string="はい", noText:string="いいえ" ) {
		// 文字描画領域サイズを得る
		textArea_ = font_.getGlyphDrawRect(text);
		textArea_.right += textArea_.left;	// 少しマージンを持たせる
		textArea_.bottom += textArea_.top;
		textArea_.left = textArea_.top = 0;
		yesArea_ = font_.getGlyphDrawRect(yesText);
		yesArea_.right += yesArea_.left;	// 少しマージンを持たせる
		yesArea_.bottom += yesArea_.top;
		yesArea_.left = yesArea_.top = 0;
		noArea_ = font_.getGlyphDrawRect(noText);
		noArea_.right += noArea_.left;	// 少しマージンを持たせる
		noArea_.bottom += noArea_.top;
		noArea_.left = noArea_.top = 0;

		// ボタン背景サイズを求める
		var buttonWidth:int = yesArea_.width < noArea_.width ? noArea_.width : yesArea_.width;
		buttonWidth += buttonTex_.margin9Patch.left + buttonTex_.margin9Patch.right;
		var buttonHeight:int = yesArea_.height + buttonTex_.margin9Patch.top + buttonTex_.margin9Patch.bottom;
		buttonArea_ = new Rect( 0, 0, buttonWidth, buttonHeight );

		// 各文字列をBitmapに描画していく。

		// 改行など考慮していないので、複数行の可能性があるのなら改行も考えた方が良い。
		var textImage:Bitmap = new Bitmap(textArea_.right, textArea_.bottom);
		ImageFunction.fillRect( textImage, 0 );
		ImageFunction.drawText( textImage, font_, 0, 0, text, 0x000000, 255, true, dfAlpha );

		var yesImage:Bitmap = new Bitmap(yesArea_.right, yesArea_.bottom);
		ImageFunction.fillRect( yesImage, 0 );
		ImageFunction.drawText( yesImage, font_, 0, 0, yesText, 0x000000, 255, true, dfAlpha );

		var noImage:Bitmap = new Bitmap(noArea_.right, noArea_.bottom);
		ImageFunction.fillRect( noImage, 0 );
		ImageFunction.drawText( noImage, font_, 0, 0, noText, 0x000000, 255, true, dfAlpha );

		// 画像はただ縦に並べる
		var texHeight = textImage.height + yesImage.height + noImage.height;

		// 幅は一番大きいものを採用
		var texWidth = 0;
		texWidth = texWidth < textImage.width ? textImage.width : texWidth;
		texWidth = texWidth < yesImage.width ? yesImage.width : texWidth;
		texWidth = texWidth < noImage.width ? noImage.width : texWidth;

		// テクスチャ生成
		if( texture_ !== void ) invalidate texture_;
		texture_ = new Texture( texWidth, texHeight, tcfRGBA );

		// テクスチャに画像をコピーしていきつつ、その場所(矩形)を保持する
		var top:int = 0;
		//texture_.copyRect( 0, top, titleImage, titleArea_ );

		//top += titleImage.height;
		texture_.copyRect( 0, top, textImage, textArea_ );
		textArea_.addOffset( 0, top );

		top += textImage.height;
		texture_.copyRect( 0, top, yesImage, yesArea_ );
		yesArea_.addOffset( 0, top );

		top += yesImage.height;
		texture_.copyRect( 0, top, noImage, noArea_ );
		noArea_.addOffset( 0, top );

		// ボタンを横に並べたものと比較
		texWidth = (buttonWidth*2+MarginPixel) > texWidth ? (buttonWidth*2+MarginPixel) : texWidth;
		width_ = texWidth + MarginPixel*2; // 左右マージンを加算
		height_ = MarginPixel*3 + textArea_.height + buttonArea_.height;

		// 不要になったBitmapは破棄
		invalidate textImage;
		invalidate yesImage;
		invalidate noImage;
	}

	/**
	 * 実際の描画処理
	 * @description 9patch がテクスチャ描画でも使えたら、テクスチャ節約できるし、描画速いし、角丸のダイアログ作りやすい。
	 * ここでは描画時に毎回位置計算するような作りになっているが、レイアウトエンジンのようなものを作って、それに最初に一度計算まかせる方が効率的でよい
	 * @param canvas 描画キャンバス
	 * @param w 描画範囲幅
	 * @param h 描画範囲高さ
	 */
	function draw( canvas:Canvas, w:int, h:int ) {
		// テクスチャが準備できていないのなら、描画しない
		if( texture_ === void ) return;

		canvas.blendMode = bmAlpha;
		canvas.defaultShader.a_opacity = 1.0;
		canvas.enableClipRect = false;
		var x = (w - width_) / 2;
		var y = (h - height_) / 2;
		canvas.save();

		// ダイアログ背景を描画
		var top = y;
		canvas.matrix.setTranslate( x, y );
		canvas.draw9Patch( dialogTop_, width_, dialogTop_.height );
		top += dialogTop_.height;
		canvas.matrix.setTranslate( x, top );
		var h = height_ - dialogTop_.height - dialogBottom_.height;
		canvas.draw9Patch( dialogMiddle_, width_, h );
		top += h;
		canvas.matrix.setTranslate( x, top );
		canvas.draw9Patch( dialogBottom_, width_, dialogBottom_.height );

		// テキスト描画
		var tw = (width_ - textArea_.width) / 2;
		top = y + MarginPixel;
		canvas.matrix.setTranslate( x+tw, top );
		canvas.drawTextureAtlas( textArea_, texture_ );	// テキスト描画

		var bottonTop = MarginPixel*3 + textArea_.height;
		var yesLeft = (width_ - buttonArea_.width*2 - MarginPixel) / 2;
		var noLeft = yesLeft + buttonArea_.width + MarginPixel;
		tw = yesLeft - tw;
		top += MarginPixel + textArea_.height;

		canvas.matrix.setTranslate( x+yesLeft, top );
		canvas.draw9Patch( buttonTex_, buttonArea_.width, buttonArea_.height );
		canvas.matrix.setTranslate( x+noLeft, top );
		canvas.draw9Patch( buttonTex_, buttonArea_.width, buttonArea_.height );

		top += buttonTex_.margin9Patch.top;
		var buttonDrawArea = buttonArea_.width - buttonTex_.margin9Patch.left - buttonTex_.margin9Patch.right;
		canvas.matrix.setTranslate( x+yesLeft+buttonTex_.margin9Patch.left + (buttonDrawArea-yesArea_.width)/2, top );
		canvas.drawTextureAtlas( yesArea_, texture_ );	// Yes文字描画
		canvas.matrix.setTranslate( x+noLeft+buttonTex_.margin9Patch.left + (buttonDrawArea-noArea_.width)/2, top );
		canvas.drawTextureAtlas( noArea_, texture_ );	// No文字描画

		var l = yesLeft + x;
		var t = bottonTop + y;
		if( yesButtonArea_ === void ) {
			yesButtonArea_ = new Rect( l, t, l+buttonArea_.width, t+buttonArea_.height );
		} else {
			yesButtonArea_.set( l, t, l+buttonArea_.width, t+buttonArea_.height );
		}
		l = noLeft + x;
		if( noButtonArea_ === void ) {
			noButtonArea_ = new Rect( l, t, l+buttonArea_.width, t+buttonArea_.height );
		} else {
			noButtonArea_.set( l, t, l+buttonArea_.width, t+buttonArea_.height );
		}
		canvas.restore();
	}
};
